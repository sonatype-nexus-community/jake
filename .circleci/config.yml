#
# Copyright 2019-Present Sonatype Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: 2.1

commands:
  ensure_poetry_installed:
    description: "Install Poetry"
    steps:
      - run: |
          python -m ensurepip --default-pip
          pip install --upgrade pip
          pip install poetry==1.5

executors:
  python310:
    docker:
      - image: cimg/python:3.10
  python39:
    docker:
      - image: cimg/python:3.9
  python38:
    docker:
      - image: cimg/python:3.8

jobs:
  build_and_test:
    parameters:
      python_version:
        type: string
    executor: python<< parameters.python_version >>
    steps:
      - ensure_poetry_installed
      - checkout
      - restore_cache: # ensure this step occurs *before* installing dependencies
          name: "Restore any valid cache"
          key: dependencies-{{ .Branch }}-<< parameters.python_version >>-{{ checksum "poetry.lock" }}
      - run:
          command: |
            poetry install --no-ansi
      - save_cache:
          name: "Cache dependencies"
          key: dependencies-{{ .Branch }}-<< parameters.python_version >>-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
      - run:
          name: "Build Jake"
          command: |
            # Poetry has no option to only install binary packages currently
            # poetry export -f requirements.txt -o pinned.requirements.txt
            # pip install --only-binary ':all:' -r pinned.requirements.txt
            poetry build
      - run:
          command: |
            poetry run tox -e py<< parameters.python_version >>
      - run:
          name: "Run Jake on Jake"
          command: |
            poetry install --no-ansi --no-dev
            poetry run jake ddt --whitelist jake-whitelist.json

  coding_standards:
    executor: python310
    steps:
      - ensure_poetry_installed
      - checkout
      - restore_cache: # ensure this step occurs *before* installing dependencies
          name: "Restore any valid cache"
          key: dependencies-{{ .Branch }}-310-{{ checksum "poetry.lock" }}
      - run:
          command: |
            poetry install --no-ansi
      - save_cache:
          name: "Cache dependencies"
          key: dependencies-{{ .Branch }}-310-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
      - run:
          command: |
            poetry run tox -eflake8

  release_and_pypi_publish:
    executor: python310
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4f:7d:6b:26:dc:44:de:b0:4d:f1:96:50:2a:b5:bd:b3"
      - ensure_poetry_installed
      - run:
          name: "Install python-semantic-release and twine"
          command: |
            pip install python-semantic-release twine
      - checkout
      - restore_cache: # ensure this step occurs *before* installing dependencies
          name: "Restore any valid cache"
          key: dependencies-{{ .Branch }}-310-{{ checksum "poetry.lock" }}
      - run:
          name: "Build for release"
          command: |
            poetry install --no-ansi
            poetry build
      - run:
          name: "Semantic Release"
          command: |
            git config user.name "$GITHUB_USERNAME"
            git config user.email "$GITHUB_EMAIL"
            semantic-release -v version
            twine upload dist/*
            semantic-release -v publish

  static_code_analysis:
    parameters:
      python_version:
        type: string
      toxenv_factor:
        type: string
    executor: python<< parameters.python_version >>
    steps:
      - checkout
      - ensure_poetry_installed
      - run:
          command: |
            poetry install --no-ansi --no-root
      - run:
          command: |
            poetry run tox -e mypy-<< parameters.toxenv_factor >>

workflows:
  cicd:
    jobs:
      - build_and_test:
          matrix:
            parameters:
              python_version: ["310", "39", "38"]
      - coding_standards
      - static_code_analysis:
          matrix:
            parameters:
              python_version: [ "310", "38" ]
              toxenv_factor: [ "locked", "lowest" ]
  release:
    jobs:
      - manual_release:
          type: approval
          filters:
            branches:
              only: main
      - release_and_pypi_publish:
          requires:
            - manual_release
          context: pypi
          filters:
            branches:
              only: main

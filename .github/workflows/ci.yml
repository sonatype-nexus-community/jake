# Copyright 2019-Present Sonatype Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Python CI

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:
  schedule:
    # schedule weekly tests, since dependencies are not intended to be pinned
    # this means: at 23:42 on Fridays
    - cron: '42 23 * * 5'

env:
  REPORTS_DIR: CI_reports
  PYTHON_VERSION_DEFAULT: "3.11"
  POETRY_VERSION: "1.4.0"

jobs:
  coding-standards:
    name: Linting & Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2

      - name: Setup Python Environment
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          architecture: 'x64'

      - name: Install poetry
        # see https://github.com/marketplace/actions/setup-poetry
        uses: Gr1N/setup-poetry@v7
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tox
        run: poetry run tox -e flake8

  static-code-analysis:
    name: Static Analysis (py${{ matrix.python-version}} ${{ matrix.toxenv-factor }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - # test with the locked dependencies
            python-version: '3.11'
            toxenv-factor: 'locked'
          - # test with the lowest dependencies
            python-version: '3.7'
            toxenv-factor: 'lowest'
    steps:
      - name: Checkout
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2

      - name: Setup Python Environment
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Install poetry
        # see https://github.com/marketplace/actions/setup-poetry
        uses: Gr1N/setup-poetry@v7
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tox
        run: poetry run tox -e mypy-${{ matrix.toxenv-factor }}

  build-and-test:
    name: Build & Test (${{ matrix.os }} py${{ matrix.python-version }} ${{ matrix.toxenv-factor }})
    runs-on: ${{ matrix.os }}
    env:
      REPORTS_ARTIFACT: tests-reports
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-20.04', 'windows-latest', 'macos-latest' ]
        python-version:
          - "3.11" # highest supported
          - "3.10"
          - "3.9"
          - "3.8"
          - "3.7"  # lowest supported
        toxenv-factor: [ 'locked' ]
        include:
          - # test with the lowest dependencies
            os: 'ubuntu-20.04'
            python-version: '3.7'
            toxenv: 'lowest'
    timeout-minutes: 30
    steps:
      - name: Checkout
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2

      - name: Create reports directory
        run: mkdir ${{ env.REPORTS_DIR }}

      - name: Setup Python Environment
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Install poetry
        # see https://github.com/marketplace/actions/setup-poetry
        uses: Gr1N/setup-poetry@v7
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-root

      - name: Ensure build successful
        run: poetry build

      - name: Run tox
        run: poetry run tox -e py-${{ matrix.toxenv-factor }} -s false

      - name: Generate coverage reports
        run: >
          poetry run coverage report &&
          poetry run coverage xml -o ${{ env.REPORTS_DIR }}/coverage-${{ matrix.os }}-${{ matrix.python-version }}.xml &&
          poetry run coverage html -d ${{ env.REPORTS_DIR }}

      - name: Artifact reports
        if: ${{ ! cancelled() }}
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.REPORTS_ARTIFACT }}
          path: ${{ env.REPORTS_DIR }}
          if-no-files-found: error
